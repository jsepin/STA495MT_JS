# m <- tram::Lm(data = model.frame(mpaper), `log(cmedv)` ~.  )
#
# par(mfrow = c(1,2))
# lmtograph(m=m,voi = "I(nox^2)",
#           equilibrate = T,
#         main = "Graph: Relation of explanatory variables\n Multivariate fitted Model",
#         cex.node = 1,
#         cex.tovoi = 1,
#         cex.main = 1,
#         col.edge.line = "blue",
#         col.edge.text = "black",
#         col.node.voi = "green",
#         col.node.nonvoi = "orange",
#         radius_circle = 0.2,
#         subR2 = TRUE,
#         mar = c(.1, .1,2.1, .1)
# )
#
# lmtograph(m=m,voi = "I(nox^2)",
#           equilibrate = F,
#           main = "Graph: Relation of explanatory variables\n Multivariate fitted Model",
#           cex.node = 1,
#           cex.tovoi = 1,
#           cex.main = 1,
#           col.edge.line = "blue",
#           col.edge.text = "black",
#           col.node.voi = "green",
#           col.node.nonvoi = "orange",
#           radius_circle = 0.2,
#           subR2 = TRUE,
#           mar = c(.1, .1,2.1, .1)
# )
m <- lm(data = iris, Petal.Length~.)
voi <- "Sepal.Width"
equilibrate = FALSE
main = "Graph: Relation of explanatory variables\n Multivariable fitted Model"
cex.node = 1
cex.tovoi = 1
cex.main = 1
col.edge.line = "blue"
col.edge.text = "blue"
col.node.voi = "green"
col.node.nonvoi = "lightblue"
radius_circle = 0.2
subR2 = FALSE
lwdtovoi =1
mar = c(2.1, 2.1,2.1, 2.1)
lmtograph(m , voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , cex.node = cex.node,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , cex.node = 5,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , cex.node = 3,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , cex.node = 2,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , cex.tovoi = 2,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , col.edge.line = 2,voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , col.edge.line = "pink",voi, equilibrate = TRUE,lwdtovoi =2)
lmtograph(m , col.edge.line = "blue",voi, equilibrate = TRUE,lwdtovoi =2)
d <- lmcopri(m,
B = 50,
ncon = NULL,
main = "Collinearity",
alpha = 0.05,
cex.vd = 1,
cex.main = 1.5,
cex.sub = 1.,
cex.prop = 1.,
xdi = 30,
ydi = 0,
returndata = T)
lmcopri(m,
B = 50,
ncon = NULL,
main = "Collinearity",
alpha = 0.05,
cex.vd = 1,
cex.main = 1.5,
cex.sub = 1.,
cex.prop = 1.,
xdi = 30,
ydi = 0,
returndata = d)
dev.off()
lmcopri(m,
B = 50,
ncon = NULL,
main = "Collinearity",
alpha = 0.05,
cex.vd = 1,
cex.main = 1.5,
cex.sub = 1.,
cex.prop = 1.,
xdi = 30,
ydi = 0,
returndata = d)
lmcopri(m,
B = 50,
ncon = NULL,
main = "Collinearity",
alpha = 0.05,
cex.vd = 1,
cex.main = 1.5,
cex.sub = 1.,
cex.prop = 1.,
xdi = 30,
ydi = 0,
returndata = d)
lmcopri(m,
B = 50,
ncon = NULL,
main = "Collinearity",
alpha = 0.05,
cex.vd = 1,
cex.main = 1.5,
cex.sub = 1.,
cex.prop = 1.,
xdi = 30,
ydi = 0,
returndata = d)
rm(list=ls())
library(tidyverse);library(mvtnorm);library(Collinearity);library(tram)
###############################################################################
# function for data generating process ----
###############################################################################
dgp <- function(n_obs,
rho,
beta_0, beta_1, beta_2,
s_y,
Delta,
id,
seed = NULL
){
# initialize seed (as in stats:::simulate.lm)
if (!exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE))
runif(1)
if (is.null(seed))
RNGstate <- get(".Random.seed", envir = .GlobalEnv)
else {
R.seed <- get(".Random.seed", envir = .GlobalEnv)
set.seed(seed)
RNGstate <- structure(seed, kind = as.list(RNGkind()))
on.exit(assign(".Random.seed", R.seed, envir = .GlobalEnv))
}
val <- tryCatch(
{
# Design matrix
X <- mvtnorm::rmvnorm(n = n_obs, mean = c(mean_x1, mean_x2),
sigma = matrix(c(sd_x1^2, rho*sd_x1*sd_x2,rho*sd_x1*sd_x2, sd_x2^2),
ncol = 2))
X <- cbind(1, X)
colnames(X) <- c("const", "x1", "x2")
# condition number
cond_nu <- max(Collinearity::Var_decom_mat.matrix(X)[,"cond_ind"])
# trouble
E <- Collinearity::equilibrate_matrix(X)
trouble <- diag(solve(t(E)%*%E))
# Outcome
eps_y <- rnorm(n = n_obs)
y <- X%*%c(beta_0,beta_1,beta_2) +eps_y*s_y
# return value
val <- data.frame("y"=y, X[,-1])
#return(val)
},error = function(e){NA}, warning = function(e){NA})
# attach seed to return value (as in stats:::simulate.lm)
attr(val, "seed") <- RNGstate
attr(val, "id") <- id
attr(val, "Delta") <- Delta
if(all(is.na(val))){
attr(val, "cond_nu") <- NA
attr(val, "trouble") <- NA
}else{
attr(val, "cond_nu") <- cond_nu
attr(val, "trouble") <- trouble
}
return(val)
}
dgp (n_obs=10,
rho=0.2,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=1,
id=1,
seed = NULL
)
dgp (n_obs=100,
rho=0.2,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=1,
id=1,
seed = NULL
)
d <- dgp (n_obs=100,
rho=0.2,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=1,
id=1,
seed = NULL
)
d <- dgp (n_obs=100,
rho=0.2,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=1,
id=1,
seed = NULL
)
d
library(tidyverse);library(mvtnorm);library(Collinearity);library(tram)
d <- dgp(n_obs=100,
rho=0.2,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=1,
id=1,
seed = NULL
)
d
d$val
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d
n_obs=100
rho=0
beta_0=1
beta_1=1
beta_2=1
s_y=1
Delta=4
id=1
eed = NULL
seed = NULL
# Design matrix
X <- mvtnorm::rmvnorm(n = n_obs, mean = c(mean_x1, mean_x2),
sigma = matrix(c(sd_x1^2, rho*sd_x1*sd_x2,rho*sd_x1*sd_x2, sd_x2^2),
ncol = 2))
X <- cbind(1, X)
colnames(X) <- c("const", "x1", "x2")
# condition number
cond_nu <- max(Collinearity::Var_decom_mat.matrix(X)[,"cond_ind"])
# trouble
E <- Collinearity::equilibrate_matrix(X)
trouble <- diag(solve(t(E)%*%E))
# Outcome
eps_y <- rnorm(n = n_obs)
y <- X%*%c(beta_0,beta_1,beta_2) +eps_y*s_y
# return value
val <- data.frame("y"=y, X[,-1])
# Load parameters
boston_parameters <- readRDS("data/boston_parameters.rds")
sd_x1= sd_x2 = 1
dgp <- function(n_obs,
rho,
beta_0, beta_1, beta_2,
s_y,
Delta,
id,
seed = NULL
){
# initialize seed (as in stats:::simulate.lm)
if (!exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE))
runif(1)
if (is.null(seed))
RNGstate <- get(".Random.seed", envir = .GlobalEnv)
else {
R.seed <- get(".Random.seed", envir = .GlobalEnv)
set.seed(seed)
RNGstate <- structure(seed, kind = as.list(RNGkind()))
on.exit(assign(".Random.seed", R.seed, envir = .GlobalEnv))
}
val <- tryCatch(
{
# Design matrix
X <- mvtnorm::rmvnorm(n = n_obs, mean = c(mean_x1, mean_x2),
sigma = matrix(c(sd_x1^2, rho*sd_x1*sd_x2,rho*sd_x1*sd_x2, sd_x2^2),
ncol = 2))
X <- cbind(1, X)
colnames(X) <- c("const", "x1", "x2")
# condition number
cond_nu <- max(Collinearity::Var_decom_mat.matrix(X)[,"cond_ind"])
# trouble
E <- Collinearity::equilibrate_matrix(X)
trouble <- diag(solve(t(E)%*%E))
# Outcome
eps_y <- rnorm(n = n_obs)
y <- X%*%c(beta_0,beta_1,beta_2) +eps_y*s_y
# return value
val <- data.frame("y"=y, X[,-1])
#return(val)
},error = function(e){NA}, warning = function(e){NA})
# attach seed to return value (as in stats:::simulate.lm)
attr(val, "seed") <- RNGstate
attr(val, "id") <- id
attr(val, "Delta") <- Delta
if(all(is.na(val))){
attr(val, "cond_nu") <- NA
attr(val, "trouble") <- NA
}else{
attr(val, "cond_nu") <- cond_nu
attr(val, "trouble") <- trouble
}
return(val)
}
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d
mean_x1 = mean_x2 = 1
mvtnorm::rmvnorm(n = n_obs, mean = c(mean_x1, mean_x2),
sigma = matrix(c(sd_x1^2, rho*sd_x1*sd_x2,rho*sd_x1*sd_x2, sd_x2^2),
ncol = 2))
dgp <- function(n_obs,
rho,
beta_0, beta_1, beta_2,
s_y,
Delta,
id,
seed = NULL
){
# initialize seed (as in stats:::simulate.lm)
if (!exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE))
runif(1)
if (is.null(seed))
RNGstate <- get(".Random.seed", envir = .GlobalEnv)
else {
R.seed <- get(".Random.seed", envir = .GlobalEnv)
set.seed(seed)
RNGstate <- structure(seed, kind = as.list(RNGkind()))
on.exit(assign(".Random.seed", R.seed, envir = .GlobalEnv))
}
val <- tryCatch(
{
# Design matrix
X <- mvtnorm::rmvnorm(n = n_obs, mean = c(mean_x1, mean_x2),
sigma = matrix(c(sd_x1^2, rho*sd_x1*sd_x2,rho*sd_x1*sd_x2, sd_x2^2),
ncol = 2))
X <- cbind(1, X)
colnames(X) <- c("const", "x1", "x2")
# condition number
cond_nu <- max(Collinearity::Var_decom_mat.matrix(X)[,"cond_ind"])
# trouble
E <- Collinearity::equilibrate_matrix(X)
trouble <- diag(solve(t(E)%*%E))
# Outcome
eps_y <- rnorm(n = n_obs)
y <- X%*%c(beta_0,beta_1,beta_2) +eps_y*s_y
# return value
val <- data.frame("y"=y, X[,-1])
#return(val)
},error = function(e){NA}, warning = function(e){NA})
# attach seed to return value (as in stats:::simulate.lm)
attr(val, "seed") <- RNGstate
attr(val, "id") <- id
attr(val, "Delta") <- Delta
if(all(is.na(val))){
attr(val, "cond_nu") <- NA
attr(val, "trouble") <- NA
}else{
attr(val, "cond_nu") <- cond_nu
attr(val, "trouble") <- trouble
}
return(val)
}
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d
?stats:::simulate
stats:::simulate
exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE)
get(".Random.seed", envir = .GlobalEnv)
?stats:::simulate.lm
stats:::simulate.lm
RNGkind()
attr(d)
d
attribute(d)
str(d)
?structure
set.seed(4234324)
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
set.seed(4234324)
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d2 <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
attributes(d)
dcopie <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = attributes(d)$seed
)
all.equal(d,dcopie)
set.seed(4234324)
d <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d2 <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
dcopie <- dgp(n_obs=100,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = attributes(d)$seed
)
all.equal(d,dcopie)
d
dcopie
set.seed(4234324)
d <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
d2 <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
dcopie <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = attributes(d)$seed
)
all.equal(d,dcopie)
attributes(d)$seed
set.seed(4234324)
d <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = 5
)
d2 <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = NULL
)
dcopie <- dgp(n_obs=10,
rho=0,
beta_0=1, beta_1=1, beta_2=1,
s_y=1,
Delta=4,
id=1,
seed = 5#attributes(d)$seed
)
all.equal(d,dcopie)
get(".Random.seed", envir = .GlobalEnv)
